// SymmetricTree.java
// Check if a binary tree is symmetric

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

public class SymmetricTree {

    // Main method to check symmetry
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true; // empty tree is symmetric
        return isMirror(root.left, root.right);
    }

    // Helper method to compare two subtrees
    private boolean isMirror(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null) return true;   // both null → symmetric
        if (t1 == null || t2 == null) return false;  // one null → not symmetric

        // Values must be equal, and children must be mirrors
        return (t1.val == t2.val) &&
               isMirror(t1.left, t2.right) &&
               isMirror(t1.right, t2.left);
    }

    // Example usage
    public static void main(String[] args) {
        // Build a small symmetric tree
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(4);
        root.right.left = new TreeNode(4);
        root.right.right = new TreeNode(3);

        SymmetricTree st = new SymmetricTree();
        System.out.println(st.isSymmetric(root)); // true
    }
}
